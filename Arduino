/*
KINNECT
 
 This program is part of the fall 2015 poe project for Olin College. 
 It receives two integers from the serial port and drives two stepper motors accordingly.
 
 author = Wannes Vanheusden
 */

// We include the necessary libraries for the Adafruit motor shield
#include <Wire.h>
#include <Adafruit_MotorShield.h>
#include "utility/Adafruit_PWMServoDriver.h"

// Create the motor shield object with the default I2C address
Adafruit_MotorShield AFMS = Adafruit_MotorShield(); 

// Connect a stepper motor with 200 steps per revolution (1.8 degree) to motor port #1 (M1 and M2) and #2 (M3 and M4)
Adafruit_StepperMotor *myMotorHelpme = AFMS.getStepper(200, 2);
Adafruit_StepperMotor *myMotorCarpe = AFMS.getStepper(200, 1);

// The programm receives a string containing two integers with a comma in between, we want to split up this string into two separate integers

String myString;          // The string we receive
String firstValue;        // first separate string
String secondValue;       // second separate string

int firstNumberInt;      // first separate string will be converted to an int
int secondNumberInt;     // second separate string will be converted to an int

int length;              // length of the string
int placeOfComma;        // index of the comma  


int maximum=300;        // maximum amount of steps the stepper motors can take, this an arbitrary number
int stepsHelpme;        // amount of steps second motor will turn
int stepsCarpe;         // amount of steps first motor will turn

// We create a memory of all steps so we can go back to the default position
int memoryStepsHelpme;
int memoryStepsCarpe;


void setup() {
  Serial.begin(9600);               // set up Serial library at 9600 bps
  myMotorHelpme->setSpeed(10);      // set the speed to 10 rpm   
  myMotorCarpe->setSpeed(10);      
}

void loop() 
{
  if(Serial.available() > 0)             // if the serial port is available, then do the following
  {
    myString = Serial.readString();          // read the port for a string and store it in myString
    placeOfComma=myString.indexOf(',');      // find the index of the comma
    length = myString.length();               // find the length of the string

    // split up the string and convert it to two integers
    firstValue = myString.substring(0,placeOfComma);         
    secondValue = myString.substring(placeOfComma+1,length);
    firstNumberInt = firstValue.toInt();
    secondNumberInt = secondValue.toInt();

    // print the two integers to see whether they are correct
    Serial.println(firstNumberInt);
    Serial.println(secondNumberInt);
  }

  // The first two integers this programm receives are very high and not valid values and the stepper motors should not move then.
  // We filter these out by ignoring values higher than an arbitrarily chosen value of 60. 
  if (firstNumberInt>60)    
  {
    stepsHelpme=0;
    stepsCarpe=0;
  }
  else          // We scale the steps the stepper motor should do linearly with the integers received, again 10 is arbitrarily chosen
  {
    stepsHelpme=firstNumberInt*10;
    stepsCarpe=secondNumberInt*10;

    // We start the Adafruit Motor Shield, we do this here instead at the setup because stepper motors have the nasty habit of drawing current even when not moving
    AFMS.begin();                         
  }


  // When a reset command is sent, The motors go back to their original position
  if(myString=="R")
  {
    // they turn backwards the amount of steps they have taken forward untill that moment
    myMotorHelpme->step(memoryStepsHelpme, BACKWARD, DOUBLE);    
    myMotorCarpe->step(memoryStepsCarpe, BACKWARD, DOUBLE);
  }
  else // if a reset command is not sent, move the motors forward
  {
    myMotorHelpme->step(stepsHelpme, FORWARD, DOUBLE);
    myMotorCarpe->step(stepsCarpe, BACKWARD, DOUBLE);
  }

  // remember all the steps taken so we know the exact position and can go back to the default position
  memoryStepsHelpme+=stepsHelpme;
  memoryStepsCarpe+=stepsCarpe;
  
  // reset the integers to zero for the next loop
  firstNumberInt=0;
  secondNumberInt=0;

  // We turn off the stepper motors so they don't use power unncessarily
  // This also means that the motors are free to spin, but in this scenario, there is enough friction to keep them from moving.
  myMotorHelpme->release();
  myMotorCarpe->release();

}
